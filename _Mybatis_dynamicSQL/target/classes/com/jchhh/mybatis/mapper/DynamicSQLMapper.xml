<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jchhh.mybatis.mapper.DynamicSQLMapper">

    <!--
        mapper接口和映射文件要保证两个一致
        1. mapper接口中的全类名和映射文件的namespace一致
        2. mapper接口中的方法的方法名要和映射文件中的sql的id保持一致
    -->
    <!--在这里写sql语句   ↓ -->

    <!--  可以记录一段sql，在需要用的地方使用include标签进行引用  -->
    <sql id="empColumns">
        emp_id,emp_name,age,gender
    </sql>

    <!--List<Emp> getEmpByCondition(Emp emp);-->
    <select id="getEmpByCondition" resultType="Emp">
        select <include refid="empColumns"/> from t_emp
        <!--
            pre 按需前加    preover 按需前减
            suf 按需后加    sufover 按需后减
        -->
        <trim prefix="where" suffixOverrides="and">
            <if test="empName != null and empName != ''">
                emp_name = #{empName} and
            </if>
            <if test="age != null and age != ''">
                age = #{age} and
            </if>
            <if test="gender = null and gender != ''">
                gender = #{gender}
            </if>
        </trim>
    </select>

    <select id="getEmpByCondition___two" resultType="Emp">
        select * from t_emp
        <where>
            <!--where标签可以 自动添加where 按需消除前置and 如果都不成立，where标签失效-->
            <if test="empName != null and empName != ''">
                and emp_name = #{empName}
            </if>
            <if test="age != null and age != ''">
                and age = #{age}
            </if>
            <if test="gender = null and gender != ''">
                and gender = #{gender}
            </if>
        </where>
    </select>

    <select id="getEmpByCondition___One" resultType="Emp">
        select * from t_emp where 1=1
        <if test="empName != null and empName != ''">
            and emp_name = #{empName}
        </if>
        <if test="age != null and age != ''">
            and age = #{age}
        </if>
        <if test="gender = null and gender != ''">
            and gender = #{gender}
        </if>
    </select>

    <!--List<Emp> getEmpByChoose(Emp emp);-->
    <select id="getEmpByChoose" resultType="Emp">
        select* from t_emp
        <where>
            <!--choose结构相当于if else结构  只能执行其中一条-->
            <choose>
                <when test="empName != null and empName != ''">
                    emp_name = #{empName}
                </when>
                <when test="age != null and age != ''">
                    age = #{age}
                </when>
                <when test="gender != null and gender != ''">
                    gender = #{gender}
                </when>
                <otherwise>
                    0=1
                </otherwise>
            </choose>
        </where>
    </select>

    <!--void insertMoreEmp(@Param("emps") List<Emp> emps);-->
    <insert id="insertMoreEmp">
        insert into t_emp values
        <foreach collection="emps" item="emp" separator=",">
            (null,#{emp.empName},#{emp.age},#{emp.gender},null)
        </foreach>
    </insert>

    <!--
        foreach：
            collection：设置要循环的数组或集合
            item：用一个字符串表示数组或集合中的每一个数据
            separator：设置每次循环的数据之间的分隔符
            open：循环的所有内容以什么开始
            close：循环的所有内容以什么结束
    -->

    <!--void deleteMoreEmp(@Param("empIds") Integer[] empIds);-->
    <delete id="deleteMoreEmp">
        delete from t_emp where
        <foreach collection="empIds" item="empId" separator="or">
            emp_id = #{empId}
        </foreach>
    </delete>

    <delete id="deleteMoreEmp__Two">
        delete from t_emp where emp_id in
        <foreach collection="empIds" item="empId" separator="," open="(" close=")">
            #{empId}
        </foreach>
    </delete>

    <delete id="deleteMoreEmp___One">
        delete from t_emp where emp_id in
        (
        <foreach collection="empIds" item="empId" separator=",">
            #{empId}
        </foreach>
        )
    </delete>

</mapper>